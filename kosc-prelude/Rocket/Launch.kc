module Rocket::Launch;

import KOS::Builtin unqualified;
import KOS::Collections unqualified;
import KOS::IO unqualified;
import KOS::Math unqualified;
import KOS::Cockpit unqualified;
import KOS::Vessel unqualified;
import KOS::Vessel::Parts unqualified;

import Rocket::Staging unqualified;

record LaunchProfile {
  Scalar targetApoapsis; // desired altitude of apoapsis [m]
  Scalar launchAzimuth; // compass direction of launch [°]
  Boolean upsideDown; // flip over to the back (like the space shuttle) instead of to the front
  Scalar countdown; // time to wait before ignition [s]
  Scalar minTurnAlt; // minimum altitude before starting turn [m]
  Scalar minTurnSpeed; // minimum speed before starting turn [m/s]
  Scalar maxTurnAlt; // final altitude of burn
  Scalar turnExponent; // parameter describing the turn shape. Ranges from zero to infinity. Smaller values mean a more shallow turn.
}


// Standard launch profile for launching at the KSC.
LaunchProfile KerbinAscent get = LaunchProfile {
    targetApoapsis = 80000,
    launchAzimuth = 90,
    upsideDown = False,
    countdown = 5,
    minTurnAlt = 1000,
    minTurnSpeed = 100,
    maxTurnAlt = 70000,
    turnExponent = 0.4 };

Void Launch(LaunchProfile ascent, Boolean() shouldStage = ShouldStageDefault) {
  Print("Preparing for launch...");

  SAS = False;
  Ship.Control.PilotMainThrottle = 0;
  Scalar cthrottle = 1;
  Direction csteering = LookDirUp(Ship.Facing.ForeVector, Ship.Facing.TopVector);
  Scalar launchAlt = Ship.Altitude;

  wait (0);

  // if ship flies "backwards" we need to reverse the launch angle
  Scalar launchAzimuth = ascent.launchAzimuth;
  if (ascent.upsideDown) {
    launchAzimuth = launchAzimuth + 180;
  }

  // give the user time to abort
  Print ("Countdown initiated.");
  Scalar countdown = ascent.countdown;
  until (countdown <= 0) {
    Print("T - " + cast<String>(countdown) + "s");
    countdown = countdown - 1;
    wait(1);
  }

  // Initialize steering and ignite engines
  Print( "Ignition.");

  lock Throttle = cthrottle;
  lock Steering = csteering;
  Stage;

  // 1. Go straight up until min speed and height are reached
  until (Ship.Altitude > ascent.minTurnAlt
    && Ship.AirSpeed > ascent.minTurnSpeed) {
      if (shouldStage()) {
        Print ("Staging.");
        Stage;
      }
      if (Ship.Altitude > launchAlt + 50) {
        csteering = Heading(launchAzimuth, 89.99);
      }
  }

  // 2. Perform gravity turn, following the calculate curve
  Print ("Starting gravity turn.");

  Scalar turnStartAlt = Ship.Altitude;
  Scalar turnStopAlt = ascent.maxTurnAlt;
  Scalar turnExponent = ascent.turnExponent;
  Scalar targetApoapsis = ascent.targetApoapsis;
  Scalar upsideDownFactor = 1;
  if (ascent.upsideDown) {
    upsideDownFactor = - 1;
  }

  until (Ship.Orbit.Apoapsis >= targetApoapsis && Ship.Altitude >= turnStopAlt) {
    if ( shouldStage() ) {
      Print ("Staging.");
      Stage;
    }
    // compute current turn angle as an exponentially shaped curve w.r.t altitude
    // that reaches 45° at approximately 10km altitude
    Scalar currentAlt = Ship.Altitude;
    Scalar turnAngle = 90 - upsideDownFactor * 90 * ((currentAlt - turnStartAlt) / (turnStopAlt - turnStartAlt)) ^ turnExponent;
    csteering = Heading(launchAzimuth, turnAngle);

    Scalar apo = Ship.Orbit.Apoapsis;
    if (apo >= targetApoapsis) {
      cthrottle = 0;
    } else {
      cthrottle = Min(1, Max(0.1, (targetApoapsis - apo) / 1000));
    }

    wait (0);
  }

  unlock Throttle;
  unlock Steering;

  Print ("Reached space.");
}
