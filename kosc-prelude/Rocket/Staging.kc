// This module contains some combinators for building staging predicates.
module Rocket::Staging;

import KOS::Builtin unqualified;
import KOS::Collections unqualified;
import KOS::IO unqualified;
import KOS::Math unqualified;
import KOS::Cockpit unqualified;
import KOS::Vessel unqualified;
import KOS::Vessel::Parts unqualified;

// Creates a predicate that returns true when either of the argument predicates returns true.
Boolean() Or(Boolean() a, Boolean() b) {
  return () -> Boolean { return a() || b(); };
}

// Creates a predicate that returns true when both of the argument predicates returns true.
Boolean() And(Boolean() a, Boolean() b) {
  return () -> Boolean { return a() && b(); };
}

// This returns true when staging is possible.
Boolean CanStage() {
  return Stage.Ready && Stage.Number > 0;
}

// Returns True if the available thrust drops to zero.
Boolean NoThrust() {
  return Ship.AvailableThrust < 0.1;
}

// returns true if there is an engine flameout
Boolean Flameout() {
  List<Engine> engines = ListEngines(Ship);
  for(Engine e : engines) {
    if (e.Flameout) {
      return True;
    }
  }
  return False;
}

// Default staging predicate looks for engine flameouts
Boolean() ShouldStageDefault = And(CanStage, Or(NoThrust, Flameout));
